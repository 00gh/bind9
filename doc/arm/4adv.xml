<chapter>
  <title>Advanced Concepts</title>
  <sect1>
    <title id="dynamic_update">Dynamic Update</title>

    <para>Dynamic update is the term used for the ability under
    certain specified conditions to add, modify or delete records or
    RRsets in the master zone files. Dynamic update is fully described
    in RFC 2136.</para>

    <para>Dynamic update is enabled on a zone-by-zone basis, by
    including an <command>allow-update</command> or
    <command>update-policy</command> clause in the
    <command>zone</command> statement.</para>

    <para>Updating of secure zones (zones using DNSSEC) is modelled
    after the <emphasis>simple-secure-update</emphasis> proposal, a
    work in progress in the DNS Extensions working group of the IETF.
    (See <ulink
    url="http://www.ietf.org/html.charters/dnsext-charter.html">http://www.ietf.org/html.charters/dnsext-charter.html</ulink>
    for information about the DNS Extensions working group.) SIG and
    NXT records affected by updates are automatically regenerated by
    the server using an online zone key. Update authorization is based
    on transaction signatures and an explicit server policy.</para>

    <para>The zone files of dynamic zones must not be edited by hand.
    The zone file on disk at any given time may not contain the latest
    changes performed by dynamic update. The zone file is written to
    disk only periodically, and changes that have occurred since the
    zone file was last written to disk are stored only in the zone's
    journal (<filename>.jnl</filename>) file. <acronym>BIND</acronym> 9 currently does
    not update the zone file when it exits as <acronym>BIND</acronym> 8 does, so editing
    the zone file manually is unsafe even when the server has been
    shut down. </para>
  </sect1>
  <sect1>
    <title id="incremental_zone_transfers">Incremental Zone Transfers (IXFR)</title>

    <para>The incremental zone transfer (IXFR) protocol is a way for
    slave servers to transfer only changed data, instead of having to
    transfer the entire zone. The IXFR protocol is documented in RFC
    1995. <xref linkend="proposed_standards"/></para>

<para>When acting as a master, <acronym>BIND</acronym> 9 supports IXFR for those zones
where the necessary change history information is available. These
include master zones maintained by dynamic update and slave zones
whose data was obtained by IXFR, but not manually maintained master
zones nor slave zones obtained by performing a full zone transfer
(AXFR).</para>
<para>When acting as a slave, <acronym>BIND</acronym> 9 will attempt to use IXFR unless
it is explicitly disabled. For more information about disabling
IXFR, see the description of the <command>request-ixfr</command> clause
of the <command>server</command> statement.</para></sect1>
<sect1><title>Split DNS</title>
<para>Setting up different views, or visibility, of DNS space to
internal and external resolvers is usually referred to as a <emphasis>Split
DNS</emphasis> setup. There are several reasons an organization
would want to set up its DNS this way.</para>
<para>One common reason for setting up a DNS system this way is
to hide "internal" DNS information from "external" clients on the
Internet. There is some debate as to whether or not this is actually useful.
Internal DNS information leaks out in many ways (via email headers,
for example) and most savvy "attackers" can find the information
they need using other means.</para>
<para>Another common reason for setting up a Split DNS system is
to allow internal networks that are behind filters or in RFC 1918
space (reserved IP space, as documented in RFC 1918) to resolve DNS
on the Internet. Split DNS can also be used to allow mail from outside
back in to the internal network.</para>
<para>Here is an example of a split DNS setup:</para>
<para>Let's say a company named <emphasis>Example, Inc.</emphasis> (example.com)
has several corporate sites that have an internal network with reserved
Internet Protocol (IP) space and an external demilitarized zone (DMZ),
or "outside" section of a network, that is available to the public.</para>
<para><emphasis>Example, Inc.</emphasis> wants its internal clients
to be able to resolve external hostnames and to exchange mail with
people on the outside. The company also wants its internal resolvers
to have access to certain internal-only zones that are not available
at all outside of the internal network.</para>
<para>In order to accomplish this, the company will set up two sets
of nameservers. One set will be on the inside network (in the reserved
IP space) and the other set will be on bastion hosts, which are "proxy"
hosts that can talk to both sides of its network, in the DMZ.</para>
<para>The internal servers will be configured to forward all queries,
except queries for <filename>site1.internal</filename>, <filename>site2.internal</filename>, <filename>site1.example.com</filename>,
and <filename>site2.example.com</filename>, to the servers in the
DMZ. These internal servers will have complete sets of information
for <filename>site1.example.com</filename>, <filename>site2.example.com</filename>,<emphasis> </emphasis><filename>site1.internal</filename>,
and <filename>site2.internal</filename>.</para>
<para>To protect the<filename> site1.interna</filename><emphasis>l</emphasis> and<emphasis> </emphasis><filename>site2.internal</filename> domains,
the internal nameservers must be configured to disallow all queries
to these domains from any external hosts, including the bastion
hosts.</para>
<para>The external servers, which are on the bastion hosts, will
be configured to serve the "public" version of the <filename>site1</filename> and <filename>site2.example.com</filename> zones.
This could include things such as the host records for public servers
(<filename>www.example.com</filename> and <filename>ftp.example.com</filename>),
and mail exchange (MX)  records (<filename>a.mx.example.com</filename> and <filename>b.mx.example.com</filename>).</para>
<para>In addition, the public <filename>site1</filename> and <filename>site2.example.com</filename> zones
should have special MX records that contain wildcard (`*') records
pointing to the bastion hosts. This is needed because external mail
servers do not have any other way of looking up how to deliver mail
to those internal hosts. With the wildcard records, the mail will
be delivered to the bastion host, which can then forward it on to
internal hosts.</para>
<para>Here's an example of a wildcard MX record:</para>
<programlisting><literal>*   IN MX 10 external1.example.com.</literal></programlisting>
<para>Now that they accept mail on behalf of anything in the internal
network, the bastion hosts will need to know how to deliver mail
to internal hosts. In order for this to work properly, the resolvers on
the bastion hosts will need to be configured to point to the internal
nameservers for DNS resolution.</para>
<para>Queries for internal hostnames will be answered by the internal
servers, and queries for external hostnames will be forwarded back
out to the DNS servers on the bastion hosts.</para>
<para>In order for all this to work properly, internal clients will
need to be configured to query <emphasis>only</emphasis> the internal
nameservers for DNS queries. This could also be enforced via selective
filtering on the network.</para>
<para>If everything has been set properly, <emphasis>Example, Inc.</emphasis>'s
internal clients will now be able to:</para>
<itemizedlist><listitem>
        <simpara>Look up any hostnames in the <systemitem class="systemname">site1</systemitem> and 
<systemitem class="systemname">site2.example.com</systemitem> zones.</simpara></listitem>
<listitem>
        <simpara>Look up any hostnames in the <systemitem class="systemname">site1.internal</systemitem> and 
<systemitem class="systemname">site2.internal</systemitem> domains.</simpara></listitem>
<listitem>
        <simpara>Look up any hostnames on the Internet.</simpara></listitem>
<listitem>
        <simpara>Exchange mail with internal AND external people.</simpara></listitem></itemizedlist>
<para>Hosts on the Internet will be able to:</para>
<itemizedlist><listitem>
        <simpara>Look up any hostnames in the <systemitem class="systemname">site1</systemitem> and 
<systemitem class="systemname">site2.example.com </systemitem>zones.</simpara></listitem>
<listitem>
        <simpara>Exchange mail with anyone in the <systemitem class="systemname">site1</systemitem> and 
<systemitem class="systemname">site2.example.com</systemitem> zones.</simpara></listitem></itemizedlist>

    <para>Here is an example configuration for the setup we just
    described above. Note that this is only configuration information;
    for information on how to configure your zone files, <xref
    linkend="sample_configuration"/></para>

<para>Internal DNS server config:</para>
<programlisting>
acl internals { 172.16.72.0/24; 192.168.1.0/24;
};
acl externals { <varname>bastion-ips-go-here</varname>; };
options {
    ...
    ...
    forward only;
    forwarders { <varname>bastion-ips-go-here</varname>; }; // forward to external
servers
    allow-transfer { none; };															// sample allow-transfer
(no one)
    allow-query { internals; externals; };															// restrict
query access
    allow-recursion { internals; };															// restrict recursion
    ...
    ...
};
zone "site1.example.com" { 															//
sample slave zone
  type master;
  file "m/site1.example.com";
  forwarders { }; 															// do normal iterative
															// resolution (do not forward)
  allow-query { internals; externals; };
  allow-transfer { internals; };
};
zone "site2.example.com" {
  type slave;
  file "s/site2.example.com";
  masters { 172.16.72.3; };
  forwarders { };
  allow-query { internals; externals; };
  allow-transfer { internals; };
};
zone "site1.internal" {
  type master;
  file "m/site1.internal";
  forwarders { };
  allow-query { internals; };
  allow-transfer { internals; }
};
zone "site2.internal" {
  type slave;
  file "s/site2.internal";
  masters { 172.16.72.3; };
  forwarders { };
  allow-query { internals };
  allow-transfer { internals; }
};
</programlisting>
    <para>External (bastion host) DNS server config:</para>
<programlisting>
acl internals { 172.16.72.0/24; 192.168.1.0/24;
};
acl externals { bastion-ips-go-here; };
options {
  ...
  ...
  allow-transfer { none; };															// sample allow-transfer
(no one)
  allow-query { internals; externals; };															// restrict
query access
  allow-recursion { internals; externals; };															// restrict
recursion
  ...
  ...
};
zone "site1.example.com" {															//
sample slave zone
  type master;
  file "m/site1.foo.com";
  allow-query { any; };
  allow-transfer { internals; externals; };
};
zone "site2.example.com" {
  type slave;
  file "s/site2.foo.com";
  masters { another_bastion_host_maybe; };
  allow-query { any; };
  allow-transfer { internals; externals; }
};
</programlisting>
<para>In the <filename>resolv.conf</filename> (or equivalent) on
the bastion host(s):</para>
<programlisting>
search ...
nameserver 172.16.72.2
nameserver 172.16.72.3
nameserver 172.16.72.4
</programlisting>
</sect1>
<sect1><title id="tsig">TSIG</title>
<para>This is a short guide to setting up Transaction SIGnatures
(TSIG) based transaction security in <acronym>BIND</acronym>. It describes changes
to the configuration file as well as what changes are required for
different features, including the process of creating transaction
keys and using transaction signatures with <acronym>BIND</acronym>.</para>
<para><acronym>BIND</acronym> primarily supports TSIG for server to server communication.
This includes zone transfer, notify, and recursive query messages.
Resolvers based on newer versions of <acronym>BIND</acronym> 8 have limited support
for TSIG.</para>

    <para>TSIG might be most useful for dynamic update. A primary
    server for a dynamic zone should use access control to control
    updates, but IP-based access control is insufficient. Key-based
    access control is far superior, <xref
    linkend="proposed_standards"/>. The <command>nsupdate</command>
    program supports TSIG via the <option>-k</option> and
    <option>-y</option> command line options.</para>

<sect2><title>Generate Shared Keys for Each Pair of Hosts</title>
<para>A shared secret is generated to be shared between <emphasis>host1</emphasis> and <emphasis>host2</emphasis>.
An arbitrary key name is chosen: "host1-host2.". The key name must
be the same on both hosts.</para>
<sect3><title>Automatic Generation</title>
<para>The following command will generate a 128 bit (16 byte) HMAC-MD5
key as described above. Longer keys are better, but shorter keys
are easier to read. Note that the maximum key length is 512 bits;
keys longer than that will be digested with MD5 to produce a 128
bit key.</para>
        <para><userinput>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</userinput></para>
<para>The key is in the file <filename>Khost1-host2.+157+00000.private</filename>.
Nothing directly uses this file, but the base-64 encoded string
following "<literal>Key:</literal>"
can be extracted from the file and used as a shared secret:</para>
<programlisting>Key: La/E5CjG9O+os1jq0a2jdA==</programlisting>
<para>The string "<literal>La/E5CjG9O+os1jq0a2jdA==</literal>" can
be used as the shared secret.</para></sect3>
<sect3><title>Manual Generation</title>
<para>The shared secret is simply a random sequence of bits, encoded
in base-64. Most ASCII strings are valid base-64 strings (assuming
the length is a multiple of 4 and only valid characters are used),
so the shared secret can be manually generated.</para>
<para>Also, a known string can be run through <command>mmencode</command> or
a similar program to generate base-64 encoded data.</para></sect3></sect2>
<sect2><title>Copying the Shared Secret to Both Machines</title>
<para>This is beyond the scope of DNS. A secure transport mechanism
should be used. This could be secure FTP, ssh, telephone, etc.</para></sect2>
<sect2><title>Informing the Servers of the Key's Existence</title>
<para>Imagine <emphasis>host1</emphasis> and <emphasis>host 2</emphasis> are
both servers. The following is added to each server's <filename>named.conf</filename> file:</para>
<programlisting>
key host1-host2. {
  algorithm hmac-md5;
  secret "La/E5CjG9O+os1jq0a2jdA==";
};
</programlisting>
<para>The algorithm, hmac-md5, is the only one supported by <acronym>BIND</acronym>.
The secret is the one generated above. Since this is a secret, it
is recommended that either <filename>named.conf</filename> be non-world
readable, or the key directive be added to a non-world readable
file that is included by <filename>named.conf</filename>.</para>
<para>At this point, the key is recognized. This means that if the
server receives a message signed by this key, it can verify the
signature. If the signature succeeds, the response is signed by
the same key.</para></sect2>
<sect2><title>Instructing the Server to Use the Key</title>
<para>Since keys are shared between two hosts only, the server must
be told when keys are to be used. The following is added to the <filename>named.conf</filename> file
for <emphasis>host1</emphasis>, if the IP address of <emphasis>host2</emphasis> is
10.1.2.3:</para>
<programlisting>
server 10.1.2.3 {
  keys { host1-host2. ;};
};
</programlisting>
<para>Multiple keys may be present, but only the first is used.
This directive does not contain any secrets, so it may be in a world-readable
file.</para>
<para>If <emphasis>host1</emphasis> sends a message that is a response
to that address, the message will be signed with the specified key. <emphasis>host1</emphasis> will
expect any responses to signed messages to be signed with the same
key.</para>
<para>A similar statement must be present in <emphasis>host2</emphasis>'s
configuration file (with <emphasis>host1</emphasis>'s address) for <emphasis>host2</emphasis> to
sign non-response messages to <emphasis>host1</emphasis>.</para></sect2>
<sect2><title>TSIG Key Based Access Control</title>
<para><acronym>BIND</acronym> allows IP addresses and ranges to be specified in ACL
definitions and
<command>allow-{ query | transfer | update } </command>directives.
This has been extended to allow TSIG keys also. The above key would
be denoted <command>key host1-host2.</command></para>
<para>An example of an allow-update directive would be:</para>
<programlisting>
allow-update { key host1-host2. ;};
</programlisting>

      <para>This allows dynamic updates to succeed only if the request
      was signed by a key named
      "<command>host1-host2.</command>".</para> <para>The more
      powerful <command>update-policy</command> statement <xref
      linkend="dynamic_update_policies"/>.</para>

    </sect2>
    <sect2>
      <title>Errors</title>

      <para>The processing of TSIG signed messages can result in
      several errors. If a signed message is sent to a non-TSIG aware
      server, a FORMERR will be returned, since the server will not
      understand the record. This is a result of misconfiguration,
      since the server must be explicitly configured to send a TSIG
      signed message to a specific server.</para>

      <para>If a TSIG aware server receives a message signed by an
      unknown key, the response will be unsigned with the TSIG
      extended error code set to BADKEY. If a TSIG aware server
      receives a message with a signature that does not validate, the
      response will be unsigned with the TSIG extended error code set
      to BADSIG. If a TSIG aware server receives a message with a time
      outside of the allowed range, the response will be signed with
      the TSIG extended error code set to BADTIME, and the time values
      will be adjusted so that the response can be successfully
      verified. In any of these cases, the message's rcode is set to
      NOTAUTH.</para>

    </sect2>
  </sect1>
  <sect1>
    <title>TKEY</title>

    <para><command>TKEY</command> is a mechanism for automatically
    generating a shared secret between two hosts.  There are several
    "modes" of <command>TKEY</command> that specify how the key is
    generated or assigned.  <acronym>BIND</acronym> implements only one of these modes,
    the Diffie-Hellman key exchange.  Both hosts are required to have
    a Diffie-Hellman KEY record (although this record is not required
    to be present in a zone).  The <command>TKEY</command> process
    must use signed messages, signed either by TSIG or SIG(0).  The
    result of <command>TKEY</command> is a shared secret that can be
    used to sign messages with TSIG.  <command>TKEY</command> can also
    be used to delete shared secrets that it had previously
    generated.</para>

    <para>The <command>TKEY</command> process is initiated by a client
    or server by sending a signed <command>TKEY</command> query
    (including any appropriate KEYs) to a TKEY-aware server.  The
    server response, if it indicates success, will contain a
    <command>TKEY</command> record and any appropriate keys.  After
    this exchange, both participants have enough information to
    determine the shared secret; the exact process depends on the
    <command>TKEY</command> mode.  When using the Diffie-Hellman
    <command>TKEY</command> mode, Diffie-Hellman keys are exchanged,
    and the shared secret is derived by both participants.</para>
  
  </sect1>
  <sect1>
    <title>SIG(0)</title>

    <para><acronym>BIND</acronym> 9 partially supports DNSSEC SIG(0) transaction
    signatures as specified in RFC 2535.  SIG(0) uses public/private
    keys to authenticate messages.  Access control is performed in the
    same manner as TSIG keys; privileges can be granted or denied
    based on the key name.</para>

    <para>When a SIG(0) signed message is received, it will only be
    verified if the key is known and trusted by the server; the server
    will not attempt to locate and/or validate the key.</para>

    <para><acronym>BIND</acronym> 9 does not ship with any tools that generate SIG(0)
    signed messages.</para>

  </sect1>
  <sect1>
    <title id="DNSSEC">DNSSEC</title>

    <para>Cryptographic authentication of DNS information is possible
    through the DNS Security (<emphasis>DNSSEC</emphasis>) extensions,
    defined in RFC 2535. This section describes the creation and use
    of DNSSEC signed zones.</para>

    <para>In order to set up a DNSSEC secure zone, there are a series
    of steps which must be followed.  <acronym>BIND</acronym> 9 ships with several tools
    that are used in this process, which are explained in more detail
    below.  In all cases, the "<option>-h</option>" option prints a
    full list of parameters.</para>

    <para>There must also be communication with the administrators of
    the parent and/or child zone to transmit keys and signatures.  A
    zone's security status must be indicated by the parent zone for a
    DNSSEC capable resolver to trust its data.</para>

    <para>For other servers to trust data in this zone, they must
    either be statically configured with this zone's zone key or the
    zone key of another zone above this one in the DNS tree.</para>

    <sect2>
      <title>Generating Keys</title>

      <para>The <command>dnssec-keygen</command> program is used to
      generate keys.</para>

      <para>A secure zone must contain one or more zone keys.  The
      zone keys will sign all other records in the zone, as well as
      the zone keys of any secure delegated zones.  Zone keys must
      have the same name as the zone, a name type of
      <command>ZONE</command>, and must be usable for authentication.
      It is recommended that zone keys be mandatory to implement a
      cryptographic algorithm; currently the only key mandatory to
      implement an algorithm is DSA.</para>

      <para>The following command will generate a 768 bit DSA key for
      the <filename>child.example</filename> zone:</para>

      <para><userinput>dnssec-keygen -a DSA -b 768 -n ZONE child.example.</userinput></para>

      <para>Two output files will be produced:
      <filename>Kchild.example.+003+12345.key</filename> and
      <filename>Kchild.example.+003+12345.private</filename> (where
      12345 is an example of a key tag).  The key file names contain
      the key name (<filename>child.example.</filename>), algorithm (3
      is DSA, 1 is RSA, etc.), and the key tag (12345 in this case).
      The private key (in the <filename>.private</filename> file) is
      used to generate signatures, and the public key (in the
      <filename>.key</filename> file) is used for signature
      verification.</para>

      <para>To generate another key with the same properties (but with
      a different key tag), repeat the above command.</para>

      <para>The public keys should be inserted into the zone file with
      <command>$INCLUDE</command> statements, including the
      <filename>.key </filename>files.</para>

    </sect2>
    <sect2>
      <title>Creating a Keyset</title>

      <para>The <command>dnssec-makekeyset</command> program is used
      to create a key set from one or more keys.</para>

      <para>Once the zone keys have been generated, a key set must be
      built for transmission to the administrator of the parent zone,
      so that the parent zone can sign the keys with its own zone key
      and correctly indicate the security status of this zone.  When
      building a key set, the list of keys to be included and the TTL
      of the set must be specified, and the desired signature validity
      period of the parent's signature may also be specified.</para>

      <para>The list of keys to be inserted into the key set may also
      included non-zone keys present at the top of the zone.
      <command>dnssec-makekeyset</command> may also be used at other
      names in the zone.</para>

      <para>The following command generates a key set containing the
      above key and another key similarly generated, with a TTL of
      3600 and a signature validity period of 10 days starting from
      now.</para>

<para><userinput>dnssec-makekeyset -t 3600 -e +86400 Kchild.example.+003+12345 Kchild.example.+003+23456</userinput></para>

      <para>One output file is produced:
      <filename>child.example.keyset</filename>.  This file should be
      transmitted to the parent to be signed.  It includes the keys,
      as well as signatures over the key set generated by the zone
      keys themselves, which are used to prove ownership of the
      private keys and encode the desired validity period.</para>

    </sect2>
    <sect2>
      <title>Signing the Child's Keyset</title>

      <para>The <command>dnssec-signkey</command> program is used to
      sign one child's keyset.</para>

      <para>If the <filename>child.example</filename> zone has any
      delegations which are secure, for example,
      <filename>grand.child.example</filename>, the
      <filename>child.example</filename> administrator should receive
      keyset files for each secure subzone.  These keys must be signed
      by this zone's zone keys.</para>

      <para>The following command signs the child's key set with the
      zone keys:</para>

<para><userinput>dnssec-signkey grand.child.example.keyset Kchild.example.+003+12345 Kchild.example.+003+23456</userinput></para>

      <para>One output file is produced:
      <filename>grand.child.example.signedkey</filename>.  This file
      should be both transmitted back to the child and retained.  It
      includes all keys (the child's keys) from the keyset file and
      signatures generated by this zone's zone keys.</para>

    </sect2>
    <sect2>
      <title>Signing the Zone</title>

      <para>The <command>dnssec-signzone</command> program is used to
      sign a zone.</para>

      <para>Any <filename>signedkey</filename> files corresponding to
      secure subzones should be present, as well as a
      <filename>signedkey</filename> file for this zone generated by
      the parent (if there is one). The zone signer will generate
      <literal>NXT</literal> and <literal>SIG</literal> records for
      the zone, as well as incorporate the zone key signature from the
      parent and indicate the security status at all delegation
      points.</para>

      <para>The following command signs the zone, assuming it is in a
      file called <filename>zone.child.example</filename>.  By
      default, all zone keys which have an available private key are
      used to generate signatures.</para>

<para><userinput>dnssec-signzone -o child.example zone.child.example</userinput></para>

      <para>One output file is produced:
      <filename>zone.child.example.signed</filename>.  This file
      should be referenced by <filename>named.conf</filename> as the
      input file for the zone.</para>

    </sect2>
    <sect2><title>Configuring Servers</title>

      <para>Unlike in <acronym>BIND</acronym> 8, data is not verified on load in <acronym>BIND</acronym> 9,
      so zone keys for authoritative zones do not need to be specified
      in the configuration file.</para>

      <para>The public key for any security root must be present in
      the configuration file's <command>trusted-keys</command>
      statement, as described later in this document. </para>

    </sect2>
  </sect1>
  <sect1>
    <title>IPv6 Support in <acronym>BIND</acronym> 9</title>

    <para><acronym>BIND</acronym> 9 fully supports all currently defined forms of IPv6
    name to address and address to name lookups.  It will also use
    IPv6 addresses to make queries when running on an IPv6 capable
    system.</para>

    <para>For forward lookups, <acronym>BIND</acronym> 9 supports both A6 and AAAA
    records.  The of AAAA records is deprecated, but it is still
    useful for hosts to have both AAAA and A6 records to maintain
    backward compatibility with installations where AAAA records are
    still used.  In fact, the stub resolvers currently shipped with
    most operating system support only AAAA lookups, because following
    A6 chains is much harder than doing A or AAAA lookups.</para>

    <para>For IPv6 reverse lookups, <acronym>BIND</acronym> 9 supports the new
    "bitstring" format used in the <emphasis>ip6.arpa</emphasis>
    domain, as well as the older, deprecated "nibble" format used in
    the <emphasis>ip6.int</emphasis> domain.</para>

    <para><acronym>BIND</acronym> 9 includes a new lightweight resolver library and
    resolver daemon which new applications may choose to use to avoid
    the complexities of A6 chain following and bitstring labels,<xref
    linkend="lightweight_resolver"/>.</para>

    <sect2>
      <title>Address Lookups Using AAAA Records</title>

      <para>The AAAA record is a parallel to the IPv4 A record.  It
      specifies the entire address in a single record.  For
      example,</para>

<programlisting>
$ORIGIN example.com.
host					1h		IN	AAAA	3ffe:8050:201:1860:42::1
</programlisting>

      <para>While their use is deprecated, they are useful to support
      older IPv6 applications.  They should not be added where they
      are not absolutely necessary.</para>

    </sect2>
    <sect2>
      <title>Address Lookups Using A6 Records</title>

      <para>The A6 record is more flexible than the AAAA record, and
      is therefore more complicated.  The A6 record can be used to
      form a chain of A6 records, each specifying part of the IPv6
      address. It can also be used to specify the entire record as
      well.  For example, this record supplies the same data as the
      AAAA record in the previous example:</para>

<programlisting>
$ORIGIN example.com.
host					1h		IN	A6	0	3ffe:8050:201:1860:42::1
</programlisting>
      <sect3>
        <title>A6 Chains</title>

        <para>A6 records are designed to allow network
        renumbering. This works when an A6 record only specifies the
        part of the address space the domain owner controls.  For
        example, a host may be at a company named "company."  It has
        two ISPs which provide IPv6 address space for it.  These two
        ISPs fully specify the IPv6 prefix they supply.</para>

        <para>In the company's address space:</para>

<programlisting>
$ORIGIN	example.com.
host			1h	IN	A6	64	0:0:0:0:42::1											company.example1.net.
host			1h	IN	A6	64	0:0:0:0:42::1					company.example2.net.
</programlisting>

        <para>ISP1 will use:</para>

<programlisting>
$ORIGIN example1.net.
company				1h		IN		A6	0	3ffe:8050:201:1860::
</programlisting>

<para>ISP2 will use:</para>

<programlisting>
$ORIGIN example2.net.
company				1h		IN		A6	0	1234:5678:90ab:fffa::
</programlisting>

        <para>When <systemitem
        class="systemname">host.example.com</systemitem> is looked up,
        the resolver (in the resolver daemon or caching name server)
        will find two partial A6 records, and will use the additional
        name to find the remainder of the data.</para>

      </sect3>
      <sect3>
        <title>A6 Records for DNS Servers</title>

        <para>When an A6 record specifies the address of a name
        server, it should use the full address rather than specifying
        a partial address.  For example:</para>

<programlisting>
$ORIGIN example.com.
@			4h		IN		NS		ns0
			4h		IN		NS		ns1
ns0			4h		IN		A6		0						3ffe:8050:201:1860:42::1
ns1			4h		IN		A		192.168.42.1
</programlisting>

        <para>It is recommended that IPv4-in-IPv6 mapped addresses not
        be used.  If a host has an IPv4 address, use an A record, not
        an A6, with <literal>::ffff:192.168.42.1</literal> as the
        address.</para>

      </sect3>
    </sect2>
    <sect2>
      <title>Address to Name Lookups Using Nibble Format</title>

      <para>While the use of nibble format to look up names is
      deprecated, it is supported for backwards compatiblity with
      existing IPv6 applications.</para>

      <para>When looking up an address in nibble format, the address
      components are simply reversed, just as in IPv4, and
      <literal>ip6.int.</literal> is appended to the resulting name.
      For example, the following would provide reverse name lookup for
      a host with address
      <literal>3ffe:8050:201:1860:42::1</literal>.</para>

<programlisting>
$ORIGIN 0.6.8.1.1.0.2.0.0.5.0.8.e.f.f.3.ip6.int.
1.0.0.0.0.0.0.0.0.0.0.0.2.4.0.0				4h										IN		PTR		host.example.com.
</programlisting>
    </sect2>
    <sect2>
      <title>Address to Name Lookups Using Bitstring Format</title>

      <para>Bitstring labels can start and end on any bit boundary,
      rather than on a multiple of 4 bits as in the nibble
      format. They also use <emphasis>ip6.arpa</emphasis> rather than
      <emphasis>ip6.int</emphasis>.</para>

      <para>To replicate the previous example using bitstrings:</para>

<programlisting>
$ORIGIN \[x3ffe805002011860/64].ip6.arpa.
\[x0042000000000001/64]									4h			IN			PTR			host.example.com.
</programlisting>
    </sect2>
    <sect2>
      <title>Using DNAME for Delegation of IPv6 Reverse Addresses</title>

      <para>In IPV6, the same host may have many addresses from many
      network providers.  Since the trailing portion of the address
      usually remains constant, <command>DNAME</command> can help
      reduce the number of zone files used for reverse mapping that
      need to be maintained.</para>

      <para>For example, consider a host which has two providers
      (<systemitem class="systemname">example.net</systemitem> and
      <systemitem class="systemname">example2.net</systemitem>) and
      therefore two IPv6 addresses.  Since the host chooses its own 64
      bit host address portion, the provider address is the only part
      that changes:</para>

<programlisting>
$ORIGIN example.com.
host						A6		64		::1234:5678:1212:5675 cust1.example.net.
						A6		64		::1234:5678:1212:5675 subnet5.example2.net.
$ORIGIN example.net.
cust1						A6		48		0:0:0:dddd:: ipv6net.example.net.
ipv6net						A6		0		aa:bb:cccc::
$ORIGIN example2.net.
subnet5						A6		48		0:0:0:1:: ipv6net2.example2.net.
ipv6net2						A6		0		6666:5555:4::
</programlisting>

<para>This sets up forward lookups.  To handle the reverse lookups,
the provider <systemitem class="systemname">example.net</systemitem>
would have:</para>

<programlisting>
$ORIGIN \[x00aa00bbcccc/48].ip6.arpa.
\[xdddd/16]								DNAME		ipv6-rev.example.com.
</programlisting>

      <para>and <systemitem
      class="systemname">example2.net</systemitem> would have:</para>

<programlisting>
$ORIGIN \[x666655550004/48].ip6.arpa.
\[x0001/16]								DNAME		ipv6-rev.example.com.
</programlisting>

      <para><systemitem class="systemname">example.com</systemitem>
      needs only one zone file to handle both of these reverse
      mappings:</para>

<programlisting>
$ORIGIN ipv6-rev.example.com.
\[x1234567812125675/64]								PTR				host.example.com. 
</programlisting>
    </sect2>
  </sect1>
</chapter>
