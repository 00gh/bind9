dnl Copyright (C) 1998, 1999  Internet Software Consortium.
dnl 
dnl Permission to use, copy, modify, and distribute this software for any
dnl purpose with or without fee is hereby granted, provided that the above
dnl copyright notice and this permission notice appear in all copies.
dnl 
dnl THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
dnl ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
dnl OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
dnl CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
dnl DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
dnl PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
dnl ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
dnl SOFTWARE.

AC_REVISION($Revision: 1.36 $)

AC_PREREQ(2.13)

AC_INIT(lib/dns/name.c)
AC_CONFIG_HEADER(config.h)

AC_CANONICAL_HOST

AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL

STD_CINCLUDES=""
STD_CDEFINES=""
STD_CWARNINGS=""
AC_SUBST(STD_CINCLUDES)
AC_SUBST(STD_CDEFINES)
AC_SUBST(STD_CWARNINGS)

dnl
dnl On these hosts, we really want to use cc, not gcc, even if it is
dnl found.  The gcc that these systems have will not correctly handle
dnl pthreads.
dnl
dnl However, if the user sets $CC to be something, let that override
dnl our change.
dnl
if test "X$CC" = "X" ; then
	case "$host" in
		*-dec-osf*)
			CC="cc"
			;;
		*-sun-solaris*)
			CC="cc"
			;;
		*-hp-hpux*)
			CC="cc"
			;;
		mips-sgi-irix*)
			CC="cc"
			;;
	esac
fi

dnl
dnl NetBSD has two alternative pthreads implementations.  Make the 
dnl user choose one by saying --with-mit-pthreads or --with-ptl2
dnl if necessary.
dnl

case "$host" in
  *-netbsd*)
	CC="gcc"
	AC_MSG_CHECKING(which thread library to use)

	AC_ARG_WITH(mit-pthreads, 
	    [  --with-mit-pthreads     use the mit-pthreads thread library],
	    use_mit_pthreads="$withval", use_mit_pthreads="no")
	
	AC_ARG_WITH(ptl2,
	    [  --with-ptl2	       use the ptl2 thread library],
	    use_ptl2="$withval", use_ptl2="no")

        dnl If user did not choose a thread library explicitly,
        dnl try to choose one automatically.  This will work when
	dnl exactly one library is installed.

	case "$use_mit_pthreads+$use_ptl2" in
		no+no)
			if test -d /usr/pkg/pthreads
			then
				use_mit_pthreads="yes"
			fi
			if test -d /usr/pkg/PTL
			then
				use_ptl2="yes"
			fi
			;;
        esac

	case "$use_mit_pthreads+$use_ptl2" in
		yes+no)
			AC_MSG_RESULT(mit-pthreads)
			pkg="/usr/pkg/pthreads"
			lib1="-L$pkg/lib -Wl,-R$pkg/lib"
			lib2="-lpthread -lm -lgcc -lpthread"
			LIBS="$lib1 $lib2 $LIBS"
			STD_CINCLUDES="-I$pkg/include"
			;;
		no+yes)
			AC_MSG_RESULT(PTL2)
dnl			pkg="/usr/pkg/PTL"
dnl			LIBS="-L/usr/pkg/lib -lPTL $LIBS"
dnl			STD_CINCLUDES="-nostdinc -idirafter $pkg/include"
			CC=ptlgcc
			;;
		*)
			AC_MSG_ERROR([no thread library.

Please choose a thread library using one of 

   configure --with-mit-pthreads
   configure --with-ptl2
])
			;;
		esac
		;;
esac

AC_PROG_CC
AC_PROG_YACC

AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h sys/sockio.h)

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

AC_CHECK_LIB(pthread, pthread_create,,
             AC_CHECK_LIB(pthread, __pthread_create)
             AC_CHECK_LIB(pthread, __pthread_create_system)
)


dnl For FreeBSD which has no libpthread but instead libc_r
if test "$ac_cv_lib_pthread" != "yes"; then
	AC_CHECK_LIB(c_r, pthread_create)
fi


dnl
dnl We'd like to use sigwait() too
dnl
AC_CHECK_LIB(pthread, sigwait,
	     AC_DEFINE(HAVE_SIGWAIT),
	     AC_CHECK_LIB(pthread, _Psigwait,
			  AC_DEFINE(HAVE_SIGWAIT),)
)

dnl
dnl Make sure we get the right sigwait() semantics...
dnl
case "$host" in
	*-sun-solaris*)
		AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)
		;;
esac

dnl
dnl NLS
dnl
AC_CHECK_FUNC(catgets, AC_DEFINE(HAVE_CATGETS),)

dnl
dnl BSDI 3.1 needs pthread_init() to be called before certain pthreads
dnl calls.  LinuxThreads requires some changes to the way we deal with
dnl signals.
dnl
case "$host" in
	*-bsdi3.1*)
		AC_DEFINE(NEED_PTHREAD_INIT)
		;;
	*-linux*)
		AC_DEFINE(HAVE_LINUXTHREADS)
		;;
esac

dnl

dnl -lxnet buys us one big porting headache...  standards, gotta love 'em.
dnl
dnl AC_CHECK_LIB(xnet, socket, ,
dnl    AC_CHECK_LIB(socket, socket)
dnl    AC_CHECK_LIB(nsl, inet_ntoa)
dnl )
dnl
dnl Use this for now, instead:
dnl
case "$host" in
	mips-sgi-irix*)
		;;
	*)
		AC_CHECK_LIB(socket, socket)
		AC_CHECK_LIB(nsl, inet_ntoa)
		;;
esac

if test "X$GCC" = "Xyes"; then
	STD_CWARNINGS="$STD_CWARNINGS -W -Wall -Wmissing-prototypes"
	case "$host" in
		*-sun-solaris*)
			LIBS="$LIBS -lthread"
			;;
	esac
else
	case "$host" in
		*-dec-osf*)
			CC="$CC -pthread"
			;;
		*-sun-solaris*)
			CC="$CC -mt"
			;;
		*-hp-hpux*)
			CC="$CC"
			;;
	esac
fi

dnl
dnl Networking specifics.
dnl
case "$host" in
	*-dec-osf*)
		dnl Turn on 4.4BSD style sa_len support.
		dnl (Disabled for now because it is incompatible
		dnl with the use of send() and recv()).
		dnl AC_DEFINE(_SOCKADDR_LEN)
		;;
esac

dnl
dnl Look for a 4.4BSD-style sa_len member in struct sockaddr.
dnl

AC_MSG_CHECKING(for sa_len in struct sockaddr)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>],
[struct sockaddr sa; sa.sa_len = 0; return (0);],
	[AC_MSG_RESULT(yes)
	ISC_NET_HAVESALEN="#define ISC_NET_HAVESALEN 1"],
	[AC_MSG_RESULT(no)
	ISC_NET_HAVESALEN="#undef ISC_NET_HAVESALEN"])
AC_SUBST(ISC_NET_HAVESALEN)

dnl
dnl IPv6
dnl
AC_MSG_CHECKING(for AF_INET6)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>],
[return (AF_INET6);],
	[AC_MSG_RESULT(yes)
	ISC_NET_NEEDAFINET6="#undef ISC_NET_NEEDAFINET6"],
	[AC_MSG_RESULT(no)
	ISC_NET_NEEDAFINET6="#define ISC_NET_NEEDAFINET6 1"])
AC_SUBST(ISC_NET_NEEDAFINET6)
AC_MSG_CHECKING(for IPv6 structures)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>],
[struct sockaddr_in6 sin6; return (0);],
	[AC_MSG_RESULT(yes)
	ISC_NET_HAVEIPV6="#define ISC_NET_HAVEIPV6 1"],
	[AC_MSG_RESULT(no)
	ISC_NET_HAVEIPV6="#undef ISC_NET_HAVEIPV6"
	ISC_IPV6_H="ipv6.h"])
AC_SUBST(ISC_NET_HAVEIPV6)
AC_SUBST(ISC_IPV6_H)

dnl
dnl GNU libtool support
dnl
AC_ARG_WITH(libtool,
	    [  --with-libtool	       use GNU libtool],
	    use_libtool="$withval", use_libtool="no")

case $use_libtool in
	yes)
		AM_PROG_LIBTOOL
		O=lo
		A=la
		;;
	*)
		O=o
		A=a
		LIBTOOL=
		AC_SUBST(LIBTOOL)
		;;
esac
AC_SUBST(O)
AC_SUBST(A)

dnl
dnl Check for network functions that are often missing.  We do this
dnl after the libtool checking, so we can put the right suffix on
dnl the files.
dnl
AC_CHECK_FUNC(inet_ntop, ,
	      [ISC_EXTRA_OBJS="$ISC_EXTRA_OBJS inet_ntop.$O"
	       AC_SUBST(ISC_EXTRA_OBJS)
	       AC_DEFINE(NEED_INET_NTOP)]
)
AC_CHECK_FUNC(inet_pton, ,
	      [ISC_EXTRA_OBJS="$ISC_EXTRA_OBJS inet_pton.$O"
	       AC_SUBST(ISC_EXTRA_OBJS)
	       AC_DEFINE(NEED_INET_PTON)]
)
AC_CHECK_FUNC(inet_aton, ,
	      [ISC_EXTRA_OBJS="$ISC_EXTRA_OBJS inet_aton.$O"
	       AC_SUBST(ISC_EXTRA_OBJS)
	       AC_DEFINE(NEED_INET_ATON)]
)


AC_SUBST(BIND9_TOP_BUILDDIR)
BIND9_TOP_BUILDDIR=`pwd`

AC_SUBST_FILE(BIND9_MAKE_RULES)
BIND9_MAKE_RULES=$BIND9_TOP_BUILDDIR/make/rules

AC_SUBST_FILE(BIND9_VERSION)
BIND9_VERSION=$srcdir/version

AC_SUBST_FILE(LIBISC_API)
LIBISC_API=$srcdir/lib/isc/api

AC_SUBST_FILE(LIBDNS_API)
LIBDNS_API=$srcdir/lib/dns/api

AC_OUTPUT(
	make/rules
	Makefile
	make/Makefile
	lib/Makefile
	lib/isc/Makefile
	lib/isc/include/Makefile
	lib/isc/include/isc/Makefile
	lib/isc/unix/Makefile
	lib/isc/unix/include/Makefile
	lib/isc/unix/include/isc/Makefile
	lib/isc/unix/include/isc/net.h
	lib/isc/nls/Makefile
	lib/isc/pthreads/Makefile
	lib/isc/pthreads/include/Makefile
	lib/isc/pthreads/include/isc/Makefile
	lib/dns/Makefile
	lib/dns/include/Makefile
	lib/dns/include/dns/Makefile
	lib/tests/Makefile
	lib/tests/include/Makefile
	lib/tests/include/tests/Makefile
	bin/Makefile
	bin/named/Makefile
	bin/tests/Makefile
	bin/tests/names/Makefile
	bin/tests/master/Makefile
	bin/tests/rbt/Makefile
)
